{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\s1900157\\\\Desktop\\\\Git examples\\\\Counter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionTypes from '../actions';\nconst initialState = {\n  counter: 0\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.INCREASE:\n      return _objectSpread({}, state, {\n        counter: state.counter + 1\n      });\n\n    case actionTypes.DECREASE:\n      return _objectSpread({}, state, {\n        counter: state.counter - 1\n      });\n\n    case actionTypes.ADD:\n      return _objectSpread({}, state, {\n        counter: state.counter + action.value\n      });\n\n    case actionTypes.REMOVE:\n      return _objectSpread({}, state, {\n        counter: state.counter - action.value\n      });\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:\\Users\\s1900157\\Desktop\\Git examples\\Counter\\src\\store\\reducers\\counter.js"],"names":["actionTypes","initialState","counter","reducer","state","action","type","INCREASE","DECREASE","ADD","value","REMOVE"],"mappings":";;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,YAA7B;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAArB;;AAIA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAW,CAACO,QAAjB;AACE,+BAAWH,KAAX;AAAkBF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,GAAgB;AAA3C;;AACF,SAAKF,WAAW,CAACQ,QAAjB;AACE,+BAAWJ,KAAX;AAAkBF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,GAAgB;AAA3C;;AACF,SAAKF,WAAW,CAACS,GAAjB;AACE,+BAAWL,KAAX;AAAkBF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,GAAgBG,MAAM,CAACK;AAAlD;;AACF,SAAKV,WAAW,CAACW,MAAjB;AACE,+BAAWP,KAAX;AAAkBF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,GAAgBG,MAAM,CAACK;AAAlD;AARJ;;AAUE,SAAON,KAAP;AACH,CAZD;;AAcA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions';\r\n\r\n\r\n\r\nconst initialState = {\r\n  counter: 0\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.INCREASE:\r\n      return {...state, counter: state.counter + 1};\r\n    case actionTypes.DECREASE:\r\n      return {...state, counter: state.counter - 1};\r\n    case actionTypes.ADD:\r\n      return {...state, counter: state.counter + action.value};\r\n    case actionTypes.REMOVE:\r\n      return {...state, counter: state.counter - action.value};\r\n  }\r\n    return state;\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}